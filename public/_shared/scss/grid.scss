
$grid-config: (
  columns: 12,
  gutter-width: 4%
);

$on-desktop: 1280px;
$on-laptop: 1024px;
$on-palm: 768px;

$breakpoints: ( //list small to large.
  sm : ( ul: $on-palm ),
  md : ( ll: $on-palm, ul: #{$on-laptop} - 1 ),
  lg : ( ll: $on-laptop, ul: #{$on-desktop} - 1 ),
  xl : ( ll: $on-desktop )
);

.container {
  position: relative;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  width: 90%;
  min-width: 300px;
  max-width: 1280px;
  margin: 0 auto;
  box-sizing: border-box;

  [class^="col"] {
    width: 100% - map-get($grid-config, gutter-width);

    @for $i from 1 through map-get($grid-config, columns) {
      $class: '.columns-'+$i;
      $base-column-width: (100%/map-get($grid-config, columns))*$i;
      $column-width: $base-column-width - map-get($grid-config, gutter-width);
      
      &#{$class} {
        width: $column-width;
      }

      @each $size, $map in $breakpoints { 
        $ll: map-get($map, ll);
        $ul: map-get($map, ul);
        $isSmallest: map-has-key($map, ul) and not(map-has-key($map, ll));
        $isLargest: map-has-key($map, ll) and not(map-has-key($map, ul));
        $responsize-class: '.col-'+$size+'-'+$i;
        
        
          @if ($isSmallest) {
            @media screen and (max-width: $ul) {
              &#{$responsize-class} {
                width: $column-width;
              }
            }
          } @else if ($isLargest) {
            @media screen and (min-width: $ll) {
              &#{$responsize-class} {
                width: $column-width;
              }
            }
          } @else {
            @media screen and (min-width: $ll) and (max-width: $ul ) {
              &#{$responsize-class} {
                width: $column-width;
              }
            }
          
        }
      }
    }
  }
}
header#mainNav {
  height: 44pt;
  //background-color: whiteSmoke;
  border-bottom: 1pt solid lightgray;
  .back {
    display:block !important;
    opacity:1!important;
    transform:none!important;
    font-size:11pt!important;
    color: map-get($colors, primary)!important;
  }
  svg {
    display:none;
  }
}

main:not(.preferences) {
  display: flex;
  width:100%;
  position:fixed;
  justify-content: flex-start;
  align-content: stretch;
  top:44pt;
  height: calc(100% - 44pt);
  ul {
    margin:0px;
    padding:20px;
    list-style: none;
    overflow:scroll;
    -webkit-overflow-scrolling: touch;
    
    &#tabsLists {
      padding:0px;
      font-weight:700;
      li { border-bottom: 1px solid none; }
      a {
        display:block;
        padding:12pt;
        color: #666;
        font-size: 11pt;;
        text-decoration: none;
        
        &:hover {
          background-color: lightgray;
        }
      }
    }
    
    &#leadsLists {
      padding:0px;
      li { border-bottom: 1pt solid lightgray; display:flex;
        &:nth-child(3) { background-colo  : map-get($colors, primary);  color:w hite;}
      figure {height: 32pt; width:32pt; background-size: cover; margin:0px 12pt 0 0; border-radius:16pt; border:1pt solid map-get($colors, primary);}
        
        margin-left:12pt;
        padding:12pt 12pt 12pt 0;
        font-size: 11pt;
        color: #222;
        text-decoration: none;
        .name {
          font-size: 12pt;
          font-weight:700;
        }
        &:hover {
        }
        }
    }
  }
  & > * {
    &:nth-child(1) { display: absolute; transform: transl ateX(-100%); background-color:whiteSmoke; border-right:1pt solid lightgray; width: 200pt; }
    &:nth-child(2) { border-right:1pt solid lightgray; width: 320pt; }
    &:nth-child(3) { flex-grow: 1; max-width:100%; background-color:whiteSmoke;}
    &:nth-child(4) { border-left:1pt solid lightgray; width: 320pt; }
  }
}
